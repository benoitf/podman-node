/**
 * supports a RESTful API for the Libpod library
 * This documentation describes the Podman v2.x+ RESTful API. It consists of a Docker-compatible API and a Libpod API providing support for Podmanâ€™s unique features such as pods.  To start the service and keep it running for 5,000 seconds (-t 0 runs forever):  podman system service -t 5000 &  You can then use cURL on the socket using requests documented below.  NOTE: if you install the package podman-docker, it will create a symbolic link for /run/docker.sock to /run/podman/podman.sock  NOTE: Some fields in the API response JSON are encoded as omitempty, which means that if said field has a zero value, they will not be encoded in the API response. This is a feature to help reduce the size of the JSON responses returned via the API.  NOTE: Due to the limitations of [go-swagger](https://github.com/go-swagger/go-swagger), some field values that have a complex type show up as null in the docs as well as in the API responses. This is because the zero value for the field type is null. The field description in the docs will state what type the field is expected to be for such cases.  See podman-service(1) for more information.  Quick Examples:  'podman info'  curl --unix-socket /run/podman/podman.sock http://d/v4.0.0/libpod/info  'podman pull quay.io/containers/podman'  curl -XPOST --unix-socket /run/podman/podman.sock -v 'http://d/v4.0.0/images/create?fromImage=quay.io%2Fcontainers%2Fpodman'  'podman list images'  curl --unix-socket /run/podman/podman.sock -v 'http://d/v4.0.0/libpod/images/json' | jq
 *
 * OpenAPI spec version: 4.0.0
 * Contact: podman@lists.podman.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { ImageVolume } from './ImageVolume';
import type { LinuxDevice } from './LinuxDevice';
import type { LinuxDeviceCgroup } from './LinuxDeviceCgroup';
import type { Mount } from './Mount';
import type { NamedVolume } from './NamedVolume';
import type { Namespace } from './Namespace';
import type { OverlayVolume } from './OverlayVolume';
import type { Secret } from './Secret';

/**
* ContainerStorageConfig contains information on the storage configuration of a container.
*/
export class ContainerStorageConfig {
    /**
    * ChrootDirs is an additional set of directories that need to be treated as root directories. Standard bind mounts will be mounted into paths relative to these directories.
    */
    'chrootDirectories'?: Array<string>;
    /**
    * Create the working directory if it doesn't exist. If unset, it doesn't create it. Optional.
    */
    'createWorkingDir'?: boolean;
    /**
    * DeviceCgroupRule are device cgroup rules that allow containers to use additional types of devices.
    */
    'deviceCgroupRule'?: Array<LinuxDeviceCgroup>;
    /**
    * Devices are devices that will be added to the container. Optional.
    */
    'devices'?: Array<LinuxDevice>;
    /**
    * DevicesFrom is a way to ensure your container inherits device specific information from another container
    */
    'devicesFrom'?: Array<string>;
    /**
    * HostDeviceList is used to recreate the mounted device on inherited containers
    */
    'hostDeviceList'?: Array<LinuxDevice>;
    /**
    * Image is the image the container will be based on. The image will be used as the container's root filesystem, and its environment vars, volumes, and other configuration will be applied to the container. Conflicts with Rootfs. At least one of Image or Rootfs must be specified.
    */
    'image'?: string;
    /**
    * ImageVolumeMode indicates how image volumes will be created. Supported modes are \"ignore\" (do not create), \"tmpfs\" (create as tmpfs), and \"anonymous\" (create as anonymous volumes). The default if unset is anonymous. Optional.
    */
    'imageVolumeMode'?: string;
    /**
    * Image volumes bind-mount a container-image mount into the container. Optional.
    */
    'imageVolumes'?: Array<ImageVolume>;
    /**
    * Init specifies that an init binary will be mounted into the container, and will be used as PID1.
    */
    'init'?: boolean;
    /**
    * InitPath specifies the path to the init binary that will be added if Init is specified above. If not specified, the default set in the Libpod config will be used. Ignored if Init above is not set. Optional.
    */
    'initPath'?: string;
    'ipcns'?: Namespace;
    /**
    * Mounts are mounts that will be added to the container. These will supersede Image Volumes and VolumesFrom volumes where there are conflicts. Optional.
    */
    'mounts'?: Array<Mount>;
    /**
    * Overlay volumes are named volumes that will be added to the container. Optional.
    */
    'overlayVolumes'?: Array<OverlayVolume>;
    /**
    * Rootfs is the path to a directory that will be used as the container's root filesystem. No modification will be made to the directory, it will be directly mounted into the container as root. Conflicts with Image. At least one of Image or Rootfs must be specified.
    */
    'rootfs'?: string;
    /**
    * RootfsOverlay tells if rootfs is actually an overlay on top of base path
    */
    'rootfsOverlay'?: boolean;
    /**
    * RootfsPropagation is the rootfs propagation mode for the container. If not set, the default of rslave will be used. Optional.
    */
    'rootfsPropagation'?: string;
    /**
    * Secrets are the secrets that will be added to the container Optional.
    */
    'secrets'?: Array<Secret>;
    /**
    * ShmSize is the size of the tmpfs to mount in at /dev/shm, in bytes. Conflicts with ShmSize if IpcNS is not private. Optional.
    */
    'shmSize'?: number;
    /**
    * StorageOpts is the container's storage options Optional.
    */
    'storageOpts'?: { [key: string]: string; };
    /**
    * Volatile specifies whether the container storage can be optimized at the cost of not syncing all the dirty files in memory.
    */
    '_volatile'?: boolean;
    /**
    * Volumes are named volumes that will be added to the container. These will supersede Image Volumes and VolumesFrom volumes where there are conflicts. Optional.
    */
    'volumes'?: Array<NamedVolume>;
    /**
    * VolumesFrom is a set of containers whose volumes will be added to this container. The name or ID of the container must be provided, and may optionally be followed by a : and then one or more comma-separated options. Valid options are 'ro', 'rw', and 'z'. Options will be used for all volumes sourced from the container.
    */
    'volumesFrom'?: Array<string>;
    /**
    * WorkDir is the container's working directory. If unset, the default, /, will be used. Optional.
    */
    'workDir'?: string;

    static readonly discriminator: string | undefined = undefined;

    static readonly attributeTypeMap: Array<{name: string, baseName: string, type: string, format: string}> = [
        {
            'name': 'chrootDirectories',
            'baseName': 'chroot_directories',
            'type': 'Array<string>',
            'format': '',
        },
        {
            'name': 'createWorkingDir',
            'baseName': 'create_working_dir',
            'type': 'boolean',
            'format': '',
        },
        {
            'name': 'deviceCgroupRule',
            'baseName': 'device_cgroup_rule',
            'type': 'Array<LinuxDeviceCgroup>',
            'format': '',
        },
        {
            'name': 'devices',
            'baseName': 'devices',
            'type': 'Array<LinuxDevice>',
            'format': '',
        },
        {
            'name': 'devicesFrom',
            'baseName': 'devices_from',
            'type': 'Array<string>',
            'format': '',
        },
        {
            'name': 'hostDeviceList',
            'baseName': 'host_device_list',
            'type': 'Array<LinuxDevice>',
            'format': '',
        },
        {
            'name': 'image',
            'baseName': 'image',
            'type': 'string',
            'format': '',
        },
        {
            'name': 'imageVolumeMode',
            'baseName': 'image_volume_mode',
            'type': 'string',
            'format': '',
        },
        {
            'name': 'imageVolumes',
            'baseName': 'image_volumes',
            'type': 'Array<ImageVolume>',
            'format': '',
        },
        {
            'name': 'init',
            'baseName': 'init',
            'type': 'boolean',
            'format': '',
        },
        {
            'name': 'initPath',
            'baseName': 'init_path',
            'type': 'string',
            'format': '',
        },
        {
            'name': 'ipcns',
            'baseName': 'ipcns',
            'type': 'Namespace',
            'format': '',
        },
        {
            'name': 'mounts',
            'baseName': 'mounts',
            'type': 'Array<Mount>',
            'format': '',
        },
        {
            'name': 'overlayVolumes',
            'baseName': 'overlay_volumes',
            'type': 'Array<OverlayVolume>',
            'format': '',
        },
        {
            'name': 'rootfs',
            'baseName': 'rootfs',
            'type': 'string',
            'format': '',
        },
        {
            'name': 'rootfsOverlay',
            'baseName': 'rootfs_overlay',
            'type': 'boolean',
            'format': '',
        },
        {
            'name': 'rootfsPropagation',
            'baseName': 'rootfs_propagation',
            'type': 'string',
            'format': '',
        },
        {
            'name': 'secrets',
            'baseName': 'secrets',
            'type': 'Array<Secret>',
            'format': '',
        },
        {
            'name': 'shmSize',
            'baseName': 'shm_size',
            'type': 'number',
            'format': 'int64',
        },
        {
            'name': 'storageOpts',
            'baseName': 'storage_opts',
            'type': '{ [key: string]: string; }',
            'format': '',
        },
        {
            'name': '_volatile',
            'baseName': 'volatile',
            'type': 'boolean',
            'format': '',
        },
        {
            'name': 'volumes',
            'baseName': 'volumes',
            'type': 'Array<NamedVolume>',
            'format': '',
        },
        {
            'name': 'volumesFrom',
            'baseName': 'volumes_from',
            'type': 'Array<string>',
            'format': '',
        },
        {
            'name': 'workDir',
            'baseName': 'work_dir',
            'type': 'string',
            'format': '',
        }    ];

    static getAttributeTypeMap() {
        return ContainerStorageConfig.attributeTypeMap;
    }

    public constructor() {
    }
}

