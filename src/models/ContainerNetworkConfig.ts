/**
 * supports a RESTful API for the Libpod library
 * This documentation describes the Podman v2.x+ RESTful API. It consists of a Docker-compatible API and a Libpod API providing support for Podmanâ€™s unique features such as pods.  To start the service and keep it running for 5,000 seconds (-t 0 runs forever):  podman system service -t 5000 &  You can then use cURL on the socket using requests documented below.  NOTE: if you install the package podman-docker, it will create a symbolic link for /run/docker.sock to /run/podman/podman.sock  NOTE: Some fields in the API response JSON are encoded as omitempty, which means that if said field has a zero value, they will not be encoded in the API response. This is a feature to help reduce the size of the JSON responses returned via the API.  NOTE: Due to the limitations of [go-swagger](https://github.com/go-swagger/go-swagger), some field values that have a complex type show up as null in the docs as well as in the API responses. This is because the zero value for the field type is null. The field description in the docs will state what type the field is expected to be for such cases.  See podman-service(1) for more information.  Quick Examples:  'podman info'  curl --unix-socket /run/podman/podman.sock http://d/v4.0.0/libpod/info  'podman pull quay.io/containers/podman'  curl -XPOST --unix-socket /run/podman/podman.sock -v 'http://d/v4.0.0/images/create?fromImage=quay.io%2Fcontainers%2Fpodman'  'podman list images'  curl --unix-socket /run/podman/podman.sock -v 'http://d/v4.0.0/libpod/images/json' | jq
 *
 * OpenAPI spec version: 4.0.0
 * Contact: podman@lists.podman.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Namespace } from './Namespace';
import type { PerNetworkOptions } from './PerNetworkOptions';
import type { PortMapping } from './PortMapping';

/**
* ContainerNetworkConfig contains information on a container's network configuration.
*/
export class ContainerNetworkConfig {
    /**
    * Map of networks names or ids that the container should join. You can request additional settings for each network, you can set network aliases, static ips, static mac address  and the network interface name for this container on the specific network. If the map is empty and the bridge network mode is set the container will be joined to the default network.
    */
    'networks'?: { [key: string]: PerNetworkOptions; };
    /**
    * CNINetworks is a list of CNI networks to join the container to. If this list is empty, the default CNI network will be joined instead. If at least one entry is present, we will not join the default network (unless it is part of this list). Only available if NetNS is set to bridge. Optional. Deprecated: as of podman 4.0 use \"Networks\" instead.
    */
    'cniNetworks'?: Array<string>;
    /**
    * DNSOptions is a set of DNS options that will be used in the container's resolv.conf, replacing the host's DNS options which are used by default. Conflicts with UseImageResolvConf. Optional.
    */
    'dnsOption'?: Array<string>;
    /**
    * DNSSearch is a set of DNS search domains that will be used in the container's resolv.conf, replacing the host's DNS search domains which are used by default. Conflicts with UseImageResolvConf. Optional.
    */
    'dnsSearch'?: Array<string>;
    /**
    * DNSServers is a set of DNS servers that will be used in the container's resolv.conf, replacing the host's DNS Servers which are used by default. Conflicts with UseImageResolvConf. Optional.
    */
    'dnsServer'?: Array<Array<number>>;
    /**
    * Expose is a number of ports that will be forwarded to the container if PublishExposedPorts is set. Expose is a map of uint16 (port number) to a string representing protocol i.e map[uint16]string. Allowed protocols are \"tcp\", \"udp\", and \"sctp\", or some combination of the three separated by commas. If protocol is set to \"\" we will assume TCP. Only available if NetNS is set to Bridge or Slirp, and PublishExposedPorts is set. Optional.
    */
    'expose'?: any;
    /**
    * HostAdd is a set of hosts which will be added to the container's etc/hosts file. Conflicts with UseImageHosts. Optional.
    */
    'hostadd'?: Array<string>;
    'netns'?: Namespace;
    /**
    * NetworkOptions are additional options for each network Optional.
    */
    'networkOptions'?: { [key: string]: Array<string>; };
    /**
    * PortBindings is a set of ports to map into the container. Only available if NetNS is set to bridge or slirp. Optional.
    */
    'portmappings'?: Array<PortMapping>;
    /**
    * PublishExposedPorts will publish ports specified in the image to random unused ports (guaranteed to be above 1024) on the host. This is based on ports set in Expose below, and any ports specified by the Image (if one is given). Only available if NetNS is set to Bridge or Slirp.
    */
    'publishImagePorts'?: boolean;
    /**
    * UseImageHosts indicates that /etc/hosts should not be managed by Podman, and instead sourced from the image. Conflicts with HostAdd. Do not set omitempty here, if this is false it should be set to not get the server default. Ideally this would be a pointer so we could differentiate between an explicitly false/true and unset (containers.conf default). However specgen is stable so we can not change this right now. TODO (5.0): change to pointer
    */
    'useImageHosts'?: boolean;
    /**
    * UseImageResolvConf indicates that resolv.conf should not be managed by Podman, but instead sourced from the image. Conflicts with DNSServer, DNSSearch, DNSOption.
    */
    'useImageResolveConf'?: boolean;

    static readonly discriminator: string | undefined = undefined;

    static readonly attributeTypeMap: Array<{name: string, baseName: string, type: string, format: string}> = [
        {
            'name': 'networks',
            'baseName': 'Networks',
            'type': '{ [key: string]: PerNetworkOptions; }',
            'format': '',
        },
        {
            'name': 'cniNetworks',
            'baseName': 'cni_networks',
            'type': 'Array<string>',
            'format': '',
        },
        {
            'name': 'dnsOption',
            'baseName': 'dns_option',
            'type': 'Array<string>',
            'format': '',
        },
        {
            'name': 'dnsSearch',
            'baseName': 'dns_search',
            'type': 'Array<string>',
            'format': '',
        },
        {
            'name': 'dnsServer',
            'baseName': 'dns_server',
            'type': 'Array<Array<number>>',
            'format': 'uint8',
        },
        {
            'name': 'expose',
            'baseName': 'expose',
            'type': 'any',
            'format': '',
        },
        {
            'name': 'hostadd',
            'baseName': 'hostadd',
            'type': 'Array<string>',
            'format': '',
        },
        {
            'name': 'netns',
            'baseName': 'netns',
            'type': 'Namespace',
            'format': '',
        },
        {
            'name': 'networkOptions',
            'baseName': 'network_options',
            'type': '{ [key: string]: Array<string>; }',
            'format': '',
        },
        {
            'name': 'portmappings',
            'baseName': 'portmappings',
            'type': 'Array<PortMapping>',
            'format': '',
        },
        {
            'name': 'publishImagePorts',
            'baseName': 'publish_image_ports',
            'type': 'boolean',
            'format': '',
        },
        {
            'name': 'useImageHosts',
            'baseName': 'use_image_hosts',
            'type': 'boolean',
            'format': '',
        },
        {
            'name': 'useImageResolveConf',
            'baseName': 'use_image_resolve_conf',
            'type': 'boolean',
            'format': '',
        }    ];

    static getAttributeTypeMap() {
        return ContainerNetworkConfig.attributeTypeMap;
    }

    public constructor() {
    }
}

