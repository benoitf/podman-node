/**
 * supports a RESTful API for the Libpod library
 * This documentation describes the Podman v2.x+ RESTful API. It consists of a Docker-compatible API and a Libpod API providing support for Podmanâ€™s unique features such as pods.  To start the service and keep it running for 5,000 seconds (-t 0 runs forever):  podman system service -t 5000 &  You can then use cURL on the socket using requests documented below.  NOTE: if you install the package podman-docker, it will create a symbolic link for /run/docker.sock to /run/podman/podman.sock  NOTE: Some fields in the API response JSON are encoded as omitempty, which means that if said field has a zero value, they will not be encoded in the API response. This is a feature to help reduce the size of the JSON responses returned via the API.  NOTE: Due to the limitations of [go-swagger](https://github.com/go-swagger/go-swagger), some field values that have a complex type show up as null in the docs as well as in the API responses. This is because the zero value for the field type is null. The field description in the docs will state what type the field is expected to be for such cases.  See podman-service(1) for more information.  Quick Examples:  'podman info'  curl --unix-socket /run/podman/podman.sock http://d/v4.0.0/libpod/info  'podman pull quay.io/containers/podman'  curl -XPOST --unix-socket /run/podman/podman.sock -v 'http://d/v4.0.0/images/create?fromImage=quay.io%2Fcontainers%2Fpodman'  'podman list images'  curl --unix-socket /run/podman/podman.sock -v 'http://d/v4.0.0/libpod/images/json' | jq
 *
 * OpenAPI spec version: 4.0.0
 * Contact: podman@lists.podman.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { DeviceMapping } from './DeviceMapping';
import type { DeviceRequest } from './DeviceRequest';
import type { LogConfig } from './LogConfig';
import type { Mount } from './Mount';
import type { PortBinding } from './PortBinding';
import type { RestartPolicy } from './RestartPolicy';
import type { ThrottleDevice } from './ThrottleDevice';
import type { Ulimit } from './Ulimit';
import type { WeightDevice } from './WeightDevice';

/**
* Here, \"non-portable\" means \"dependent of the host we are running on\". Portable information *should* appear in Config.
*/
export class HostConfig {
    'autoRemove'?: boolean;
    /**
    * Applicable to all platforms
    */
    'binds'?: Array<string>;
    'blkioDeviceReadBps'?: Array<ThrottleDevice>;
    'blkioDeviceReadIOps'?: Array<ThrottleDevice>;
    'blkioDeviceWriteBps'?: Array<ThrottleDevice>;
    'blkioDeviceWriteIOps'?: Array<ThrottleDevice>;
    'blkioWeight'?: number;
    'blkioWeightDevice'?: Array<WeightDevice>;
    /**
    * We need to override the json decoder to accept both options.
    */
    'capAdd'?: Array<string>;
    /**
    * We need to override the json decoder to accept both options.
    */
    'capDrop'?: Array<string>;
    'cgroup'?: string;
    /**
    * Applicable to UNIX platforms
    */
    'cgroupParent'?: string;
    /**
    * CgroupnsMode represents the cgroup namespace mode of the container
    */
    'cgroupnsMode'?: string;
    /**
    * Applicable to Windows
    */
    'consoleSize'?: Array<number>;
    'containerIDFile'?: string;
    /**
    * Applicable to Windows
    */
    'cpuCount'?: number;
    'cpuPercent'?: number;
    'cpuPeriod'?: number;
    'cpuQuota'?: number;
    'cpuRealtimePeriod'?: number;
    'cpuRealtimeRuntime'?: number;
    /**
    * Applicable to all platforms
    */
    'cpuShares'?: number;
    'cpusetCpus'?: string;
    'cpusetMems'?: string;
    'deviceCgroupRules'?: Array<string>;
    'deviceRequests'?: Array<DeviceRequest>;
    'devices'?: Array<DeviceMapping>;
    'dns'?: Array<string>;
    'dnsOptions'?: Array<string>;
    'dnsSearch'?: Array<string>;
    'extraHosts'?: Array<string>;
    'groupAdd'?: Array<string>;
    'iOMaximumBandwidth'?: number;
    'iOMaximumIOps'?: number;
    /**
    * Run a custom init inside the container, if null, use the daemon's configured settings
    */
    'init'?: boolean;
    'ipcMode'?: string;
    /**
    * Isolation represents the isolation technology of a container. The supported values are platform specific
    */
    'isolation'?: string;
    'kernelMemory'?: number;
    'kernelMemoryTCP'?: number;
    'links'?: Array<string>;
    'logConfig'?: LogConfig;
    /**
    * MaskedPaths is the list of paths to be masked inside the container (this overrides the default set of paths)
    */
    'maskedPaths'?: Array<string>;
    'memory'?: number;
    'memoryReservation'?: number;
    'memorySwap'?: number;
    'memorySwappiness'?: number;
    /**
    * Mounts specs used by the container
    */
    'mounts'?: Array<Mount>;
    'nanoCpus'?: number;
    'networkMode'?: string;
    'oomKillDisable'?: boolean;
    'oomScoreAdj'?: number;
    'pidMode'?: string;
    'pidsLimit'?: number;
    /**
    * PortMap is a collection of PortBinding indexed by Port
    */
    'portBindings'?: { [key: string]: Array<PortBinding>; };
    'privileged'?: boolean;
    'publishAllPorts'?: boolean;
    /**
    * ReadonlyPaths is the list of paths to be set as read-only inside the container (this overrides the default set of paths)
    */
    'readonlyPaths'?: Array<string>;
    'readonlyRootfs'?: boolean;
    'restartPolicy'?: RestartPolicy;
    'runtime'?: string;
    'securityOpt'?: Array<string>;
    'shmSize'?: number;
    'storageOpt'?: { [key: string]: string; };
    'sysctls'?: { [key: string]: string; };
    'tmpfs'?: { [key: string]: string; };
    'uTSMode'?: string;
    'ulimits'?: Array<Ulimit>;
    'usernsMode'?: string;
    'volumeDriver'?: string;
    'volumesFrom'?: Array<string>;

    static readonly discriminator: string | undefined = undefined;

    static readonly attributeTypeMap: Array<{name: string, baseName: string, type: string, format: string}> = [
        {
            'name': 'autoRemove',
            'baseName': 'AutoRemove',
            'type': 'boolean',
            'format': '',
        },
        {
            'name': 'binds',
            'baseName': 'Binds',
            'type': 'Array<string>',
            'format': '',
        },
        {
            'name': 'blkioDeviceReadBps',
            'baseName': 'BlkioDeviceReadBps',
            'type': 'Array<ThrottleDevice>',
            'format': '',
        },
        {
            'name': 'blkioDeviceReadIOps',
            'baseName': 'BlkioDeviceReadIOps',
            'type': 'Array<ThrottleDevice>',
            'format': '',
        },
        {
            'name': 'blkioDeviceWriteBps',
            'baseName': 'BlkioDeviceWriteBps',
            'type': 'Array<ThrottleDevice>',
            'format': '',
        },
        {
            'name': 'blkioDeviceWriteIOps',
            'baseName': 'BlkioDeviceWriteIOps',
            'type': 'Array<ThrottleDevice>',
            'format': '',
        },
        {
            'name': 'blkioWeight',
            'baseName': 'BlkioWeight',
            'type': 'number',
            'format': 'uint16',
        },
        {
            'name': 'blkioWeightDevice',
            'baseName': 'BlkioWeightDevice',
            'type': 'Array<WeightDevice>',
            'format': '',
        },
        {
            'name': 'capAdd',
            'baseName': 'CapAdd',
            'type': 'Array<string>',
            'format': '',
        },
        {
            'name': 'capDrop',
            'baseName': 'CapDrop',
            'type': 'Array<string>',
            'format': '',
        },
        {
            'name': 'cgroup',
            'baseName': 'Cgroup',
            'type': 'string',
            'format': '',
        },
        {
            'name': 'cgroupParent',
            'baseName': 'CgroupParent',
            'type': 'string',
            'format': '',
        },
        {
            'name': 'cgroupnsMode',
            'baseName': 'CgroupnsMode',
            'type': 'string',
            'format': '',
        },
        {
            'name': 'consoleSize',
            'baseName': 'ConsoleSize',
            'type': 'Array<number>',
            'format': 'uint64',
        },
        {
            'name': 'containerIDFile',
            'baseName': 'ContainerIDFile',
            'type': 'string',
            'format': '',
        },
        {
            'name': 'cpuCount',
            'baseName': 'CpuCount',
            'type': 'number',
            'format': 'int64',
        },
        {
            'name': 'cpuPercent',
            'baseName': 'CpuPercent',
            'type': 'number',
            'format': 'int64',
        },
        {
            'name': 'cpuPeriod',
            'baseName': 'CpuPeriod',
            'type': 'number',
            'format': 'int64',
        },
        {
            'name': 'cpuQuota',
            'baseName': 'CpuQuota',
            'type': 'number',
            'format': 'int64',
        },
        {
            'name': 'cpuRealtimePeriod',
            'baseName': 'CpuRealtimePeriod',
            'type': 'number',
            'format': 'int64',
        },
        {
            'name': 'cpuRealtimeRuntime',
            'baseName': 'CpuRealtimeRuntime',
            'type': 'number',
            'format': 'int64',
        },
        {
            'name': 'cpuShares',
            'baseName': 'CpuShares',
            'type': 'number',
            'format': 'int64',
        },
        {
            'name': 'cpusetCpus',
            'baseName': 'CpusetCpus',
            'type': 'string',
            'format': '',
        },
        {
            'name': 'cpusetMems',
            'baseName': 'CpusetMems',
            'type': 'string',
            'format': '',
        },
        {
            'name': 'deviceCgroupRules',
            'baseName': 'DeviceCgroupRules',
            'type': 'Array<string>',
            'format': '',
        },
        {
            'name': 'deviceRequests',
            'baseName': 'DeviceRequests',
            'type': 'Array<DeviceRequest>',
            'format': '',
        },
        {
            'name': 'devices',
            'baseName': 'Devices',
            'type': 'Array<DeviceMapping>',
            'format': '',
        },
        {
            'name': 'dns',
            'baseName': 'Dns',
            'type': 'Array<string>',
            'format': '',
        },
        {
            'name': 'dnsOptions',
            'baseName': 'DnsOptions',
            'type': 'Array<string>',
            'format': '',
        },
        {
            'name': 'dnsSearch',
            'baseName': 'DnsSearch',
            'type': 'Array<string>',
            'format': '',
        },
        {
            'name': 'extraHosts',
            'baseName': 'ExtraHosts',
            'type': 'Array<string>',
            'format': '',
        },
        {
            'name': 'groupAdd',
            'baseName': 'GroupAdd',
            'type': 'Array<string>',
            'format': '',
        },
        {
            'name': 'iOMaximumBandwidth',
            'baseName': 'IOMaximumBandwidth',
            'type': 'number',
            'format': 'uint64',
        },
        {
            'name': 'iOMaximumIOps',
            'baseName': 'IOMaximumIOps',
            'type': 'number',
            'format': 'uint64',
        },
        {
            'name': 'init',
            'baseName': 'Init',
            'type': 'boolean',
            'format': '',
        },
        {
            'name': 'ipcMode',
            'baseName': 'IpcMode',
            'type': 'string',
            'format': '',
        },
        {
            'name': 'isolation',
            'baseName': 'Isolation',
            'type': 'string',
            'format': '',
        },
        {
            'name': 'kernelMemory',
            'baseName': 'KernelMemory',
            'type': 'number',
            'format': 'int64',
        },
        {
            'name': 'kernelMemoryTCP',
            'baseName': 'KernelMemoryTCP',
            'type': 'number',
            'format': 'int64',
        },
        {
            'name': 'links',
            'baseName': 'Links',
            'type': 'Array<string>',
            'format': '',
        },
        {
            'name': 'logConfig',
            'baseName': 'LogConfig',
            'type': 'LogConfig',
            'format': '',
        },
        {
            'name': 'maskedPaths',
            'baseName': 'MaskedPaths',
            'type': 'Array<string>',
            'format': '',
        },
        {
            'name': 'memory',
            'baseName': 'Memory',
            'type': 'number',
            'format': 'int64',
        },
        {
            'name': 'memoryReservation',
            'baseName': 'MemoryReservation',
            'type': 'number',
            'format': 'int64',
        },
        {
            'name': 'memorySwap',
            'baseName': 'MemorySwap',
            'type': 'number',
            'format': 'int64',
        },
        {
            'name': 'memorySwappiness',
            'baseName': 'MemorySwappiness',
            'type': 'number',
            'format': 'int64',
        },
        {
            'name': 'mounts',
            'baseName': 'Mounts',
            'type': 'Array<Mount>',
            'format': '',
        },
        {
            'name': 'nanoCpus',
            'baseName': 'NanoCpus',
            'type': 'number',
            'format': 'int64',
        },
        {
            'name': 'networkMode',
            'baseName': 'NetworkMode',
            'type': 'string',
            'format': '',
        },
        {
            'name': 'oomKillDisable',
            'baseName': 'OomKillDisable',
            'type': 'boolean',
            'format': '',
        },
        {
            'name': 'oomScoreAdj',
            'baseName': 'OomScoreAdj',
            'type': 'number',
            'format': 'int64',
        },
        {
            'name': 'pidMode',
            'baseName': 'PidMode',
            'type': 'string',
            'format': '',
        },
        {
            'name': 'pidsLimit',
            'baseName': 'PidsLimit',
            'type': 'number',
            'format': 'int64',
        },
        {
            'name': 'portBindings',
            'baseName': 'PortBindings',
            'type': '{ [key: string]: Array<PortBinding>; }',
            'format': '',
        },
        {
            'name': 'privileged',
            'baseName': 'Privileged',
            'type': 'boolean',
            'format': '',
        },
        {
            'name': 'publishAllPorts',
            'baseName': 'PublishAllPorts',
            'type': 'boolean',
            'format': '',
        },
        {
            'name': 'readonlyPaths',
            'baseName': 'ReadonlyPaths',
            'type': 'Array<string>',
            'format': '',
        },
        {
            'name': 'readonlyRootfs',
            'baseName': 'ReadonlyRootfs',
            'type': 'boolean',
            'format': '',
        },
        {
            'name': 'restartPolicy',
            'baseName': 'RestartPolicy',
            'type': 'RestartPolicy',
            'format': '',
        },
        {
            'name': 'runtime',
            'baseName': 'Runtime',
            'type': 'string',
            'format': '',
        },
        {
            'name': 'securityOpt',
            'baseName': 'SecurityOpt',
            'type': 'Array<string>',
            'format': '',
        },
        {
            'name': 'shmSize',
            'baseName': 'ShmSize',
            'type': 'number',
            'format': 'int64',
        },
        {
            'name': 'storageOpt',
            'baseName': 'StorageOpt',
            'type': '{ [key: string]: string; }',
            'format': '',
        },
        {
            'name': 'sysctls',
            'baseName': 'Sysctls',
            'type': '{ [key: string]: string; }',
            'format': '',
        },
        {
            'name': 'tmpfs',
            'baseName': 'Tmpfs',
            'type': '{ [key: string]: string; }',
            'format': '',
        },
        {
            'name': 'uTSMode',
            'baseName': 'UTSMode',
            'type': 'string',
            'format': '',
        },
        {
            'name': 'ulimits',
            'baseName': 'Ulimits',
            'type': 'Array<Ulimit>',
            'format': '',
        },
        {
            'name': 'usernsMode',
            'baseName': 'UsernsMode',
            'type': 'string',
            'format': '',
        },
        {
            'name': 'volumeDriver',
            'baseName': 'VolumeDriver',
            'type': 'string',
            'format': '',
        },
        {
            'name': 'volumesFrom',
            'baseName': 'VolumesFrom',
            'type': 'Array<string>',
            'format': '',
        }    ];

    static getAttributeTypeMap() {
        return HostConfig.attributeTypeMap;
    }

    public constructor() {
    }
}

