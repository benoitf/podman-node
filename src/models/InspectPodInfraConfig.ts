/**
 * supports a RESTful API for the Libpod library
 * This documentation describes the Podman v2.x+ RESTful API. It consists of a Docker-compatible API and a Libpod API providing support for Podmanâ€™s unique features such as pods.  To start the service and keep it running for 5,000 seconds (-t 0 runs forever):  podman system service -t 5000 &  You can then use cURL on the socket using requests documented below.  NOTE: if you install the package podman-docker, it will create a symbolic link for /run/docker.sock to /run/podman/podman.sock  NOTE: Some fields in the API response JSON are encoded as omitempty, which means that if said field has a zero value, they will not be encoded in the API response. This is a feature to help reduce the size of the JSON responses returned via the API.  NOTE: Due to the limitations of [go-swagger](https://github.com/go-swagger/go-swagger), some field values that have a complex type show up as null in the docs as well as in the API responses. This is because the zero value for the field type is null. The field description in the docs will state what type the field is expected to be for such cases.  See podman-service(1) for more information.  Quick Examples:  'podman info'  curl --unix-socket /run/podman/podman.sock http://d/v4.0.0/libpod/info  'podman pull quay.io/containers/podman'  curl -XPOST --unix-socket /run/podman/podman.sock -v 'http://d/v4.0.0/images/create?fromImage=quay.io%2Fcontainers%2Fpodman'  'podman list images'  curl --unix-socket /run/podman/podman.sock -v 'http://d/v4.0.0/libpod/images/json' | jq
 *
 * OpenAPI spec version: 4.0.0
 * Contact: podman@lists.podman.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { InspectHostPort } from './InspectHostPort';

/**
* InspectPodInfraConfig contains the configuration of the pod's infra container.
*/
export class InspectPodInfraConfig {
    /**
    * DNSOption is a set of DNS options that will be used by the infra container's resolv.conf and shared with the remainder of the pod.
    */
    'dNSOption'?: Array<string>;
    /**
    * DNSSearch is a set of DNS search domains that will be used by the infra container's resolv.conf and shared with the remainder of the pod.
    */
    'dNSSearch'?: Array<string>;
    /**
    * DNSServer is a set of DNS Servers that will be used by the infra container's resolv.conf and shared with the remainder of the pod.
    */
    'dNSServer'?: Array<string>;
    /**
    * HostAdd adds a number of hosts to the infra container's resolv.conf which will be shared with the rest of the pod.
    */
    'hostAdd'?: Array<string>;
    /**
    * HostNetwork is whether the infra container (and thus the whole pod) will use the host's network and not create a network namespace.
    */
    'hostNetwork'?: boolean;
    /**
    * NetworkOptions are additional options for each network
    */
    'networkOptions'?: { [key: string]: Array<string>; };
    /**
    * Networks is a list of CNI networks the pod will join.
    */
    'networks'?: Array<string>;
    /**
    * NoManageHosts indicates that the pod will not manage /etc/hosts and instead each container will handle their own.
    */
    'noManageHosts'?: boolean;
    /**
    * NoManageResolvConf indicates that the pod will not manage resolv.conf and instead each container will handle their own.
    */
    'noManageResolvConf'?: boolean;
    /**
    * PortBindings are ports that will be forwarded to the infra container and then shared with the pod.
    */
    'portBindings'?: { [key: string]: Array<InspectHostPort>; };
    /**
    * StaticIP is a static IPv4 that will be assigned to the infra container and then used by the pod.
    */
    'staticIP'?: string;
    /**
    * StaticMAC is a static MAC address that will be assigned to the infra container and then used by the pod.
    */
    'staticMAC'?: string;
    /**
    * CPUPeriod contains the CPU period of the pod
    */
    'cpuPeriod'?: number;
    /**
    * CPUQuota contains the CPU quota of the pod
    */
    'cpuQuota'?: number;
    /**
    * CPUSetCPUs contains linux specific CPU data for the container
    */
    'cpusetCpus'?: string;
    /**
    * Pid is the PID namespace mode of the pod's infra container
    */
    'pidNs'?: string;
    /**
    * UserNS is the usernamespace that all the containers in the pod will join.
    */
    'userns'?: string;

    static readonly discriminator: string | undefined = undefined;

    static readonly attributeTypeMap: Array<{name: string, baseName: string, type: string, format: string}> = [
        {
            'name': 'dNSOption',
            'baseName': 'DNSOption',
            'type': 'Array<string>',
            'format': '',
        },
        {
            'name': 'dNSSearch',
            'baseName': 'DNSSearch',
            'type': 'Array<string>',
            'format': '',
        },
        {
            'name': 'dNSServer',
            'baseName': 'DNSServer',
            'type': 'Array<string>',
            'format': '',
        },
        {
            'name': 'hostAdd',
            'baseName': 'HostAdd',
            'type': 'Array<string>',
            'format': '',
        },
        {
            'name': 'hostNetwork',
            'baseName': 'HostNetwork',
            'type': 'boolean',
            'format': '',
        },
        {
            'name': 'networkOptions',
            'baseName': 'NetworkOptions',
            'type': '{ [key: string]: Array<string>; }',
            'format': '',
        },
        {
            'name': 'networks',
            'baseName': 'Networks',
            'type': 'Array<string>',
            'format': '',
        },
        {
            'name': 'noManageHosts',
            'baseName': 'NoManageHosts',
            'type': 'boolean',
            'format': '',
        },
        {
            'name': 'noManageResolvConf',
            'baseName': 'NoManageResolvConf',
            'type': 'boolean',
            'format': '',
        },
        {
            'name': 'portBindings',
            'baseName': 'PortBindings',
            'type': '{ [key: string]: Array<InspectHostPort>; }',
            'format': '',
        },
        {
            'name': 'staticIP',
            'baseName': 'StaticIP',
            'type': 'string',
            'format': 'ipv4',
        },
        {
            'name': 'staticMAC',
            'baseName': 'StaticMAC',
            'type': 'string',
            'format': '',
        },
        {
            'name': 'cpuPeriod',
            'baseName': 'cpu_period',
            'type': 'number',
            'format': 'uint64',
        },
        {
            'name': 'cpuQuota',
            'baseName': 'cpu_quota',
            'type': 'number',
            'format': 'int64',
        },
        {
            'name': 'cpusetCpus',
            'baseName': 'cpuset_cpus',
            'type': 'string',
            'format': '',
        },
        {
            'name': 'pidNs',
            'baseName': 'pid_ns',
            'type': 'string',
            'format': '',
        },
        {
            'name': 'userns',
            'baseName': 'userns',
            'type': 'string',
            'format': '',
        }    ];

    static getAttributeTypeMap() {
        return InspectPodInfraConfig.attributeTypeMap;
    }

    public constructor() {
    }
}

