/**
 * supports a RESTful API for the Libpod library
 * This documentation describes the Podman v2.x+ RESTful API. It consists of a Docker-compatible API and a Libpod API providing support for Podmanâ€™s unique features such as pods.  To start the service and keep it running for 5,000 seconds (-t 0 runs forever):  podman system service -t 5000 &  You can then use cURL on the socket using requests documented below.  NOTE: if you install the package podman-docker, it will create a symbolic link for /run/docker.sock to /run/podman/podman.sock  NOTE: Some fields in the API response JSON are encoded as omitempty, which means that if said field has a zero value, they will not be encoded in the API response. This is a feature to help reduce the size of the JSON responses returned via the API.  NOTE: Due to the limitations of [go-swagger](https://github.com/go-swagger/go-swagger), some field values that have a complex type show up as null in the docs as well as in the API responses. This is because the zero value for the field type is null. The field description in the docs will state what type the field is expected to be for such cases.  See podman-service(1) for more information.  Quick Examples:  'podman info'  curl --unix-socket /run/podman/podman.sock http://d/v4.0.0/libpod/info  'podman pull quay.io/containers/podman'  curl -XPOST --unix-socket /run/podman/podman.sock -v 'http://d/v4.0.0/images/create?fromImage=quay.io%2Fcontainers%2Fpodman'  'podman list images'  curl --unix-socket /run/podman/podman.sock -v 'http://d/v4.0.0/libpod/images/json' | jq
 *
 * OpenAPI spec version: 4.0.0
 * Contact: podman@lists.podman.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Namespace } from './Namespace';

export class PodBasicConfig {
    /**
    * Hostname is the pod's hostname. If not set, the name of the pod will be used (if a name was not provided here, the name auto-generated for the pod will be used). This will be used by the infra container and all containers in the pod as long as the UTS namespace is shared. Optional.
    */
    'hostname'?: string;
    /**
    * InfraCommand sets the command that will be used to start the infra container. If not set, the default set in the Libpod configuration file will be used. Conflicts with NoInfra=true. Optional.
    */
    'infraCommand'?: Array<string>;
    /**
    * InfraConmonPidFile is a custom path to store the infra container's conmon PID.
    */
    'infraConmonPidFile'?: string;
    /**
    * InfraImage is the image that will be used for the infra container. If not set, the default set in the Libpod configuration file will be used. Conflicts with NoInfra=true. Optional.
    */
    'infraImage'?: string;
    /**
    * InfraName is the name that will be used for the infra container. If not set, the default set in the Libpod configuration file will be used. Conflicts with NoInfra=true. Optional.
    */
    'infraName'?: string;
    /**
    * Labels are key-value pairs that are used to add metadata to pods. Optional.
    */
    'labels'?: { [key: string]: string; };
    /**
    * Name is the name of the pod. If not provided, a name will be generated when the pod is created. Optional.
    */
    'name'?: string;
    /**
    * NoInfra tells the pod not to create an infra container. If this is done, many networking-related options will become unavailable. Conflicts with setting any options in PodNetworkConfig, and the InfraCommand and InfraImages in this struct. Optional.
    */
    'noInfra'?: boolean;
    'pidns'?: Namespace;
    'podCreateCommand'?: Array<string>;
    /**
    * Devices contains user specified Devices to be added to the Pod
    */
    'podDevices'?: Array<string>;
    /**
    * PodCreateCommand is the command used to create this pod. This will be shown in the output of Inspect() on the pod, and may also be used by some tools that wish to recreate the pod (e.g. `podman generate systemd --new`). Optional. ShareParent determines if all containers in the pod will share the pod's cgroup as the cgroup parent
    */
    'shareParent'?: boolean;
    /**
    * SharedNamespaces instructs the pod to share a set of namespaces. Shared namespaces will be joined (by default) by every container which joins the pod. If not set and NoInfra is false, the pod will set a default set of namespaces to share. Conflicts with NoInfra=true. Optional.
    */
    'sharedNamespaces'?: Array<string>;
    /**
    * Sysctl sets kernel parameters for the pod
    */
    'sysctl'?: { [key: string]: string; };
    'userns'?: Namespace;

    static readonly discriminator: string | undefined = undefined;

    static readonly attributeTypeMap: Array<{name: string, baseName: string, type: string, format: string}> = [
        {
            'name': 'hostname',
            'baseName': 'hostname',
            'type': 'string',
            'format': '',
        },
        {
            'name': 'infraCommand',
            'baseName': 'infra_command',
            'type': 'Array<string>',
            'format': '',
        },
        {
            'name': 'infraConmonPidFile',
            'baseName': 'infra_conmon_pid_file',
            'type': 'string',
            'format': '',
        },
        {
            'name': 'infraImage',
            'baseName': 'infra_image',
            'type': 'string',
            'format': '',
        },
        {
            'name': 'infraName',
            'baseName': 'infra_name',
            'type': 'string',
            'format': '',
        },
        {
            'name': 'labels',
            'baseName': 'labels',
            'type': '{ [key: string]: string; }',
            'format': '',
        },
        {
            'name': 'name',
            'baseName': 'name',
            'type': 'string',
            'format': '',
        },
        {
            'name': 'noInfra',
            'baseName': 'no_infra',
            'type': 'boolean',
            'format': '',
        },
        {
            'name': 'pidns',
            'baseName': 'pidns',
            'type': 'Namespace',
            'format': '',
        },
        {
            'name': 'podCreateCommand',
            'baseName': 'pod_create_command',
            'type': 'Array<string>',
            'format': '',
        },
        {
            'name': 'podDevices',
            'baseName': 'pod_devices',
            'type': 'Array<string>',
            'format': '',
        },
        {
            'name': 'shareParent',
            'baseName': 'share_parent',
            'type': 'boolean',
            'format': '',
        },
        {
            'name': 'sharedNamespaces',
            'baseName': 'shared_namespaces',
            'type': 'Array<string>',
            'format': '',
        },
        {
            'name': 'sysctl',
            'baseName': 'sysctl',
            'type': '{ [key: string]: string; }',
            'format': '',
        },
        {
            'name': 'userns',
            'baseName': 'userns',
            'type': 'Namespace',
            'format': '',
        }    ];

    static getAttributeTypeMap() {
        return PodBasicConfig.attributeTypeMap;
    }

    public constructor() {
    }
}

